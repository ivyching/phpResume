!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=681)}({14:function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},681:function(e,t,r){(function(e){function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.jQuery;!function(e,r){var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._selectorOfRequiredFormat={}}return function(e,r,n){r&&t(e.prototype,r),n&&t(e,n)}(e,[{key:"handleFieldFormat",value:function(){var e=this;r.each(this.selectorOfRequiredFormat,function(t,n){r("body").off("change",t).on("change",t,function(t){e._valueNumberformat.apply(e,[t,n])})})}},{key:"_valueNumberformat",value:function(e,t){var n=r(e.currentTarget).val();n=this.unFormatNumber(n),n=this.formatNumber(n,t),r(e.currentTarget).val(n)}},{key:"formatNumber",value:function(e,t){if(e=parseFloat(e),isNaN(e))return null;t=void 0==t?2:t;var r=Math.pow(10,t);return(e=Math.round(e*r)/r).toLocaleString("en-US",{minimumFractionDigits:t})}},{key:"unFormatNumber",value:function(e){return"number"==typeof e&&(e=e.toString()),"string"!=typeof e?e:parseFloat(e.replace(/,/g,""))}},{key:"selectorOfRequiredFormat",get:function(){return this._selectorOfRequiredFormat},set:function(e){this._selectorOfRequiredFormat=e}}]),e}();e.CalculateProcess=n}(window,jQuery)}).call(this,r(14))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvQ2FsY3VsYXRlUHJvY2Vzcy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJldmFsIiwiZSIsIndpbmRvdyIsImdsb2JhbCIsImpRdWVyeSIsIiQiLCJDYWxjdWxhdGVQcm9jZXNzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3NlbGVjdG9yT2ZSZXF1aXJlZEZvcm1hdCIsIl9jcmVhdGVDbGFzcyIsInNlbGYiLCJlYWNoIiwic2VsZWN0b3JPZlJlcXVpcmVkRm9ybWF0IiwiaW5kZXgiLCJvZmYiLCJvbiIsIl92YWx1ZU51bWJlcmZvcm1hdCIsImFwcGx5IiwiQml0cyIsIk51bWJlciIsImN1cnJlbnRUYXJnZXQiLCJ2YWwiLCJ1bkZvcm1hdE51bWJlciIsImZvcm1hdE51bWJlciIsIm51bWJlciIsInBhcnNlRmxvYXQiLCJpc05hTiIsInVuZGVmaW5lZCIsInBvdyIsIk1hdGgiLCJyb3VuZCIsInRvTG9jYWxlU3RyaW5nIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwic3RyIiwidG9TdHJpbmciLCJyZXBs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LEVBQUlBLEVBQy9CLElBQUlVLEVBQU1DLEtBQUtELElBQUksR0FBSVYsR0FJdkIsT0FGQU0sRUFBU0ssS0FBS0MsTUFBTU4sRUFBT0ksR0FBS0EsR0FFbEJHLGVBQWUsU0FBVUMsc0JBQXVCZCxPQTdDcEQ5QixJQUFBLGlCQUFBTixNQUFBLFNBaURDbUQsR0FJWCxNQUhtQixpQkFBUkEsSUFDUEEsRUFBTUEsRUFBSUMsWUFFSyxpQkFBUkQsRUFDQUEsRUFFSlIsV0FBV1EsRUFBSUUsUUFBUSxLQUFNLFFBeEQxQi9DLElBQUEsMkJBQUFWLElBQUEsV0FVVixPQUFPb0IsS0FBS1UsMkJBVkY0QixJQUFBLFNBYWV4QixHQUN6QmQsS0FBS1UsMEJBQTRCSSxNQWR2Qk4sRUFBQSxHQTZEbEJKLEVBQU9JLGlCQUFtQkEsRUE3RDlCLENBOERHSixPQUFRRSIsImZpbGUiOiJDYWxjdWxhdGVQcm9jZXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY4MSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiY29uc3QgJCA9IGdsb2JhbC5qUXVlcnk7XHJcblxyXG4vL+eUqHdlYnBhY2sgZXM2IOS4jeacg+eahOipsSDljrvnnItrbnDmlZnlrbhcclxuKGZ1bmN0aW9uICh3aW5kb3csICQpIHtcclxuXHJcbiAgICBjbGFzcyBDYWxjdWxhdGVQcm9jZXNzIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3JPZlJlcXVpcmVkRm9ybWF0ID0ge1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/opoHooqvoh6rli5Vmb3JtYXTnmoRpbnB1dCB7c2VsZWN0b3I65bCP5pW46bue5b6M5bm+5L2NfVxyXG4gICAgICAgIGdldCBzZWxlY3Rvck9mUmVxdWlyZWRGb3JtYXQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rvck9mUmVxdWlyZWRGb3JtYXRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBzZWxlY3Rvck9mUmVxdWlyZWRGb3JtYXQoc2VsZWN0b3JPZlJlcXVpcmVkRm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yT2ZSZXF1aXJlZEZvcm1hdCA9IHNlbGVjdG9yT2ZSZXF1aXJlZEZvcm1hdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhhbmRsZUZpZWxkRm9ybWF0KCl7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuc2VsZWN0b3JPZlJlcXVpcmVkRm9ybWF0LCBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5vZmYoJ2NoYW5nZScsIGluZGV4KS5vbignY2hhbmdlJywgaW5kZXgsIGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3ZhbHVlTnVtYmVyZm9ybWF0LmFwcGx5KHNlbGYsIFtlLCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9wcml2YXRlXHJcbiAgICAgICAgX3ZhbHVlTnVtYmVyZm9ybWF0KGUsIEJpdHMpIHtcclxuICAgICAgICAgICAgdmFyIE51bWJlciA9ICQoZS5jdXJyZW50VGFyZ2V0KS52YWwoKTtcclxuICAgICAgICAgICAgTnVtYmVyID0gdGhpcy51bkZvcm1hdE51bWJlcihOdW1iZXIpO1xyXG4gICAgICAgICAgICBOdW1iZXIgPSB0aGlzLmZvcm1hdE51bWJlcihOdW1iZXIsIEJpdHMpO1xyXG4gICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkudmFsKE51bWJlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2Zvcm1hdOaVuOWtl1xyXG4gICAgICAgIGZvcm1hdE51bWJlcihudW1iZXIsIEJpdHMpIHtcclxuICAgICAgICAgICAgbnVtYmVyID0gcGFyc2VGbG9hdChudW1iZXIpO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQml0cyA9IEJpdHMgPT0gdW5kZWZpbmVkID8gMiA6IEJpdHM7XHJcbiAgICAgICAgICAgIGxldCBwb3cgPSBNYXRoLnBvdygxMCwgQml0cyk7XHJcblxyXG4gICAgICAgICAgICBudW1iZXIgPSBNYXRoLnJvdW5kKG51bWJlcipwb3cpL3BvdztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge21pbmltdW1GcmFjdGlvbkRpZ2l0czogQml0c30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy91bmZvcm1hdOaVuOWtl1xyXG4gICAgICAgIHVuRm9ybWF0TnVtYmVyKHN0cikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIHN0ciA9IHN0ci50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChzdHIucmVwbGFjZSgvLC9nLCBcIlwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICB3aW5kb3cuQ2FsY3VsYXRlUHJvY2VzcyA9IENhbGN1bGF0ZVByb2Nlc3M7XHJcbn0pKHdpbmRvdywgalF1ZXJ5KTsiXSwic291cmNlUm9vdCI6IiJ9