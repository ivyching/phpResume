!function(e){var t={};function s(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(o,n,function(t){return e[t]}.bind(null,n));return o},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=685)}({14:function(e,t){var s;s=function(){return this}();try{s=s||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(s=window)}e.exports=s},685:function(e,t,s){(function(e){function t(e,t){for(var s=0;s<t.length;s++){var o=t[s];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e.jQuery;!function(e,s,o){var n=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);this.guid=t,s(this._selector.memoPanel).on("click",this._selector.timelineMemoButton,this.timelineMemoDisplay.bind(this)),s(this._selector.memoPanel).on("click",this._selector.memoSaveButton,this.memoSave.bind(this)),s(this._selector.memoPanel).on("click",this._selector.jsdeleteButton,this.handleMemoDelete.bind(this)),s(this._selector.memoPanel).on("click",this._selector.showMessage,this.showMessage.bind(this)),setInterval(this.refreshWsLogMessage.bind(this),1e4)}return function(e,s,o){s&&t(e.prototype,s),o&&t(e,o)}(e,[{key:"showMessage",value:function(e){var t=s(e.currentTarget);t.data("show")?(t.html('<i class="fa fa-chevron-down"></i> '+this.translation.messageShowmore),s(this._selector.memoMessageBody+" >  li").each(function(e,t){e>10&&s(t).slideUp()}),t.data("show",!1)):(t.html('<i class="fa fa-chevron-up"></i> '+this.translation.messageHide),s(this._selector.memoMessageBody+" >  li").slideDown("slow"),t.data("show",!0))}},{key:"refreshWsLogMessage",value:function(){var e={refreshTime:s(this._selector.refreshTime).html()?s(this._selector.refreshTime).html().trim():"",guid:this._guid},t=this,n=new Date,i=n.getFullYear()+"-"+("0"+(n.getMonth()+1)).slice(-2)+"-"+("0"+n.getDate()).slice(-2)+" "+("0"+n.getHours()).slice(-2)+":"+("0"+n.getMinutes()).slice(-2)+":"+("0"+n.getSeconds()).slice(-2);s(this._selector.refreshTime).html(i),s.ajax({url:o.generate("LogMessage_Refresh"),method:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify(e),success:function(e){s.each(e,function(e,s){t._addRow(s)})},error:function(){}})}},{key:"timelineMemoDisplay",value:function(e){s(e.currentTarget).hasClass("active")?(s(e.currentTarget).removeClass("active"),s(this._selector.timelineMemoClick).fadeOut()):(s(e.currentTarget).addClass("active"),s(this._selector.timelineMemoClick).fadeIn())}},{key:"memoSave",value:function(e){var t={messageBodyHtml:s(this._selector.logMessageBody).val(),guid:this._guid},n=this;s.ajax({url:o.generate("LogMessage_Add"),method:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify(t),success:function(e){s(n._selector.timelineMemoClick).removeClass("has-error"),n.refreshWsLogMessage(),n._clearForm()},error:function(e,t){s(n._selector.timelineMemoClick).addClass("has-error");var o=JSON.parse(e.responseText);s(n._selector.logMessageBody).siblings(".help-block").html(o.errors)}})}},{key:"_clearForm",value:function(){s(this._selector.logMessageBody).val(""),s(this._selector.logMessageBody).siblings(".help-block").html("")}},{key:"_addRow",value:function(e){var t=e.createdTime.substr(0,4)-1911,o='<li>   <div class="smart-timeline-icon">       <i class="fa fa-file-text"></i>   </div>   <div class="smart-timeline-time">       <small>'+(t=t+"-"+e.createdTime.substr(5,20))+'</small>   </div>   <div class="smart-timeline-content">       <p class="memo-delete-btn">';e.deleteable&&(o+='           <button type="button" class="btn btn-xs btn-danger js-delete-memo-log" data-sn="'+e.sn+'">               <i class="fa fa-trash-o"></i>           </button>'),e.messageBodyHtml=this.escapeHtml(e.messageBodyHtml),o+="       </p>       <p>           "+e.createdUid+"       </p>       <p>           "+e.messageBodyHtml+"       </p>   </div></li>",s(this._selector.memoMessageBody).prepend(o)}},{key:"escapeHtml",value:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}},{key:"_mapErrorsToForm",value:function(e){console.log(e)}},{key:"handleMemoDelete",value:function(e){var t=s(this._selector.jsdeleteButton).data("sn"),n=s(e.currentTarget),i=this;swal({title:"Are you sure?",text:"You won't be able to revert this!",type:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, delete it!"}).then(function(e){e.value&&s.ajax({url:o.generate("LogMessage_Delete"),method:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify({sn:t}),success:function(){swal("Deleted!","Your file has been deleted.","success"),i._deleteRow(n)},error:function(e,t){var s=JSON.parse(e.responseText);alert(s.errors)}})})}},{key:"_deleteRow",value:function(e){e.closest("li").remove()}},{key:"_selector",get:function(){return{memoPanel:"div#memoPanel",memoMessgeDiv:"div#memoMessgeDiv",timelineMemoButton:"button#timelineMemo",timelineMemoClick:".timelineMemoClick",memoSaveButton:"button#memoSave",logMessageBody:"textarea#logMessageBody",guidInput:"input#pc01_form_guid",memoMessageBody:"#memoMessageBody",jsdeleteButton:".js-delete-memo-log",refreshTime:"#refresh-time",showMessage:"#showMessage"}}},{key:"translation",get:function(){return this._translation},set:function(e){this._translation=e}},{key:"guid",get:function(){return this._guid},set:function(e){this._guid=e}}]),e}();e.WsLogMessageApp=n}(window,jQuery,Routing)}).call(this,s(14))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,